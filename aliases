alias homesteadup='cd ~/Homestead/ && vagrant up'
alias myip='curl ipinfo.io/ip'
alias nowhite='for file in *;do mv $file ${file// /_};done'
alias pu='phpunit --color=always'
alias vpu='./vendor/bin/phpunit'
alias dockerup='systemctl start docker'
alias vim='vimx'
alias co='select br in $(git recent); do git co $br; break; done'
alias ll='ls -la'

project() {
       if [ $# -eq 0 ]; then
           echo "Please supply a project direcory or '/' for the root dir"
       elif [ $1 = '/' ]; then
          cd /home/roger/projects
       elif [ $1 = 'go' ]; then
          cd /home/roger/go/src/$2
       elif [ $1 = '-w' ]; then
          cd /home/roger/projects/work/$2
       else
          cd /home/roger/projects/$1
      fi
}

searchNotes() {
    cd /home/roger/Documents/notes

    if [ $# -eq 0 ]; then
        vim `fzf --preview="cat {}" --preview-window=right:70%:wrap`
    else
        vim `grep -rnw '/home/roger/Documents/notes' -e $1 | cut -f1 -d":" | fzf --preview="cat {}" --preview-window=right:70%:wrap`
    fi
}

note() {
    cd /home/roger/Documents/notes
    if [ $# -gt 0 ]; then
        case $1 in
            -n | --new )
                case "$2" in
                    "")
                        NAME=$(date +"%F")
                        TODAY=$(date +"%A-%b-%d-%Y")
                        touch $NAME
                        echo "$TODAY \n\n" >> $NAME
                        vim $NAME
                        ;;
                    *)
                        NAME=$2
                        touch $NAME
                        vim $NAME
                        ;;
                esac;;
            -s | --search )
                case "$2" in
                    "")
                        vim `fzf --preview="cat {}" --preview-window=right:70%:wrap | sort -k9`
                        ;;
                    *)
                        vim `ag $2 '/home/roger/Documents/notes' | cut -f1 -d":" | fzf --preview="cat {}" --preview-window=right:70%:wrap`
                        ;;
                esac;;
            -a | --archive )
               case "$2" in
                   "")
                         echo "you must include the files to archive. i.e. note -a 2018-10-*"
                         ;;
                   *)
                         for FILE in $2
                         do
                           echo -e "\n[Index](index.md)" >> $FILE
                           echo -e "[$FILE]($FILE)<br>" >> kb/journal/index.md
                           mv $FILE kb/journal/
                         done
                         ;;
               esac;;
            -h | --help )
               echo -e "
                   create a new \`note -n [name of note]\`
                   create a default journal note, named with the current date, exclude the [name of note]\n
                   search notes \`note -s \"[search term]\"\` (note the search term is inside \"s\n
                   archive notes \'note -a [file(s) to archive\'
                   for example, to archive the October 2018 journal files enter \'note -a 2018-10-*\'
               "
        esac
    else
        echo "a switch is required. -s for search, -n for new, -a for archive"
    fi
}

servemd() {
    if [ $# -gt 0 ]; then
        case $1 in
            -kb)
                cd ~/Documents/notes/kb
                grip index.md
                ;;
            *)
                grip $1
                ;;
        esac
    else
        grip index.md
    fi
}

weather() {
       if [ $# -eq 0 ]; then
          curl wttr.in/27298
       else
          curl wttr.in/$1
       fi
}

# wrapper for easy extraction of compressed files
    function extract () {
      if [ -f $1 ] ; then
          case $1 in
              *.tar.xz)    tar xvJf $1    ;;
              *.tar.bz2)   tar xvjf $1    ;;
              *.tar.gz)    tar xvzf $1    ;;
              *.bz2)       bunzip2 $1     ;;
              *.rar)       unrar e $1     ;;
              *.gz)        gunzip $1      ;;
              *.tar)       tar xvf $1     ;;
              *.tbz2)      tar xvjf $1    ;;
              *.tgz)       tar xvzf $1    ;;
              *.apk)       unzip $1       ;;
              *.epub)      unzip $1       ;;
              *.xpi)       unzip $1       ;;
              *.zip)       unzip $1       ;;
              *.war)       unzip $1       ;;
              *.jar)       unzip $1       ;;
              *.Z)         uncompress $1  ;;
              *.7z)        7z x $1        ;;
              *)           echo "don't know how to extract '$1'..." ;;
          esac
      else
          echo "'$1' is not a valid file!"
      fi
    }
# fix corrupt zsh history
function historyFIx() {
    mv ~/.zsh_history ~/.zsh_history_bad
    strings .zsh_history_bad > .zsh_history
    fc -R ~/.zsh_history
    rm ~/.zsh_history_bad
}
